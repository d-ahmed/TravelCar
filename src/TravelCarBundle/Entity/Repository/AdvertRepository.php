<?php

namespace TravelCarBundle\Entity\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Serializer\Normalizer\DateTimeNormalizer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByUser($user, $page, $numberPerPage)
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder->where('a.user = :user')
                ->setParameter('user', $user)
                ->orderBy('a.date', 'ASC');
        $adverts = $queryBuilder->getQuery();
        $adverts->setFirstResult(($page-1)*$numberPerPage)
                ->setMaxResults($numberPerPage);
        
        return new Paginator($adverts, true);
    }

    public function findByMatchAnnonces($departureCity, $cityOfArrival, $departureDate, $page, $numberPerPage)
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $departureDate = $departureDate->modify('-1 day');
        
        $queryBuilder->where('a.departureCity like :departureCity')
                ->setParameter('departureCity', $departureCity)
                ->andWhere('a.cityOfArrival like :cityOfArrival')
                ->setParameter('cityOfArrival', $cityOfArrival)
                ->andWhere('a.departureDate > :departureDate')
                ->setParameter('departureDate', $departureDate)
                ->orderBy('a.departureDate', 'ASC');
        
        $adverts = $queryBuilder->getQuery();
        
        $adverts->setFirstResult(($page-1)*$numberPerPage)
                ->setMaxResults($numberPerPage);
        
        return new Paginator($adverts, true);
    }
    
    public function findByUserDepartureDate($user, $departureDate)
    {
        $queryBuilder = $this->createQueryBuilder('a');
        $queryBuilder->where('a.departureDate > :departureDate1')
                ->andWhere('a.user = :user')
                ->setParameter('departureDate1', $departureDate->modify('-1 day'))
                ->setParameter('user', $user)
                ;
        
        $adverts = $queryBuilder->getQuery()->getResult();
        $departureDate->modify('+1 day');
        $newAdvert = array();
        
        foreach ($adverts as $advert) {
            $timeBetween2Advert = $advert->getDepartureDate()->diff($departureDate)->h;
            $travelTime = intval($advert->getTravelTime()->format('h'))+1;
            $intervalYear = $advert->getDepartureDate()->diff($departureDate)->y;
            $intervalMonth = $advert->getDepartureDate()->diff($departureDate)->d;
            $intervalDay = $advert->getDepartureDate()->diff($departureDate)->m;
            
            if ($timeBetween2Advert <= $travelTime && $intervalDay==0 && $intervalMonth==0 && $intervalYear==0) {
                $newAdvert[]=$advert;
            }
        }

        return $newAdvert;
    }

    public function findByLast()
    {
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder->orderBy('a.departureDate', 'desc');

        $adverts = $queryBuilder->getQuery();

        $adverts->setFirstResult(0)
            ->setMaxResults(3);

        $adverts = $adverts->getResult();

        $dateNormalazer = new DateTimeNormalizer();
        $objectNormalazer = new ObjectNormalizer();
        $objectNormalazer->setIgnoredAttributes(array('reservations', 'posts', 'user'));

        foreach ($adverts as $advert) {
            $advert->setDate($dateNormalazer->normalize($advert->getDate()));
            $advert->setDepartureDate($dateNormalazer->normalize($advert->getDepartureDate()));
            $advert->setTravelTime($dateNormalazer->normalize($advert->getTravelTime()));
        }

        foreach ($adverts as $advert) {
            $normalazedAdvert [] = $objectNormalazer->normalize($advert);
        }


        return $normalazedAdvert;
    }

    public function findLastByPrice($sort)
    {
        $queryBuilder = $this->createQueryBuilder('a');

        $queryBuilder->orderBy('a.pricePerPersonne', $sort);

        $adverts = $queryBuilder->getQuery();

        $adverts->setFirstResult(0)
            ->setMaxResults(3);
        $adverts = $adverts->getResult();

        $dateNormalazer = new DateTimeNormalizer();
        $objectNormalazer = new ObjectNormalizer();
        $objectNormalazer->setIgnoredAttributes(array('reservations', 'posts', 'user'));

        foreach ($adverts as $advert) {
            $advert->setDate($dateNormalazer->normalize($advert->getDate()));
            $advert->setDepartureDate($dateNormalazer->normalize($advert->getDepartureDate()));
            $advert->setTravelTime($dateNormalazer->normalize($advert->getTravelTime()));
        }

        foreach ($adverts as $advert) {
            $normalazedAdvert [] = $objectNormalazer->normalize($advert);
        }


        return $normalazedAdvert;
    }
}
